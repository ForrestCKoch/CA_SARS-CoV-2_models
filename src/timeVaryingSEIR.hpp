
// Code generated by stanc v2.26.0
#include <stan/model/model_header.hpp>
namespace timeVaryingSEIR_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 53, column 2 to column 27)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 54, column 2 to column 35)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 55, column 2 to column 26)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 76, column 2 to column 40)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 62, column 33 to column 51)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 62, column 9 to column 25)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 62, column 2 to column 53)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 64, column 2 to column 29)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 65, column 2 to column 25)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 66, column 2 to column 16)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 68, column 2 to column 120)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 71, column 4 to column 54)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 70, column 36 to line 72, column 3)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 70, column 2 to line 72, column 3)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 34, column 2 to column 32)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 35, column 2 to column 34)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 36, column 2 to column 33)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 37, column 2 to column 32)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 38, column 2 to column 24)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 39, column 28 to column 46)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 39, column 2 to column 48)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 40, column 30 to column 50)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 40, column 2 to column 52)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 44, column 2 to column 27)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 45, column 2 to column 26)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 46, column 2 to column 54)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 47, column 2 to column 61)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 48, column 2 to column 62)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 49, column 2 to column 27)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 3, column 4 to column 20)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 4, column 4 to column 18)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 5, column 4 to column 18)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 6, column 4 to column 68)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 7, column 4 to column 88)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 8, column 4 to column 20)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 2, column 84 to line 9, column 3)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 13, column 11 to column 26)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 13, column 4 to column 31)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 14, column 4 to column 20)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 15, column 4 to column 18)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 16, column 4 to column 18)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 18, column 4 to column 62)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 20, column 4 to column 22)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 21, column 4 to column 28)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 22, column 4 to column 30)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 23, column 4 to column 30)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 24, column 4 to column 33)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 25, column 4 to column 32)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 26, column 4 to column 36)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 27, column 4 to column 27)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 29, column 4 to column 14)",
                                                      " (in '/data/Projects/MMID/CA_SARS-CoV-2_models/src/timeVaryingSEIR.stan', line 11, column 85 to line 30, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__, stan::promote_args_t<stan::value_type_t<T5__>>>
get_infected(const T0__& t, const T1__& beta_start, const T2__& beta_end,
             const T3__& k, const T4__& m, const T5__& V_arg__,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<stan::value_type_t<T5__>>>;
  const auto& V = to_ref(V_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ N;
    N = DUMMY_VAR__;
    
    current_statement__ = 30;
    N = sum(V);
    local_scalar_t__ beta_eff;
    beta_eff = DUMMY_VAR__;
    
    local_scalar_t__ infected;
    infected = DUMMY_VAR__;
    
    current_statement__ = 33;
    beta_eff = (beta_end +
                 ((beta_start - beta_end) /
                   (1 + stan::math::exp((-k * (m - t))))));
    current_statement__ = 34;
    infected = (((beta_eff * V[(1 - 1)]) *
                  (((0.2 *
                      sum(
                        rvalue(V,
                          cons_list(index_min_max(2, 17), nil_index_list()),
                          "V"))) +
                     (1.2 *
                       sum(
                         rvalue(V,
                           cons_list(index_min_max(18, 19), nil_index_list()),
                           "V")))) +
                    sum(
                      rvalue(V,
                        cons_list(index_min_max(20, 29), nil_index_list()),
                        "V")))) / N);
    current_statement__ = 35;
    return infected;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_infected_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__, stan::promote_args_t<stan::value_type_t<T5__>>>
operator()(const T0__& t, const T1__& beta_start, const T2__& beta_end,
           const T3__& k, const T4__& m, const T5__& V,
           std::ostream* pstream__)  const 
{
return get_infected(t, beta_start, beta_end, k, m, V, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
strat_seir(const T0__& t, const T1__& V_arg__, const T2__& beta_start,
           const T3__& beta_end, const T4__& m, const T5__& k,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__>>;
  const auto& V = to_ref(V_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 37;
    validate_non_negative_index("dV", "num_elements(V)", num_elements(V));
    Eigen::Matrix<local_scalar_t__, -1, 1> dV;
    dV = Eigen::Matrix<local_scalar_t__, -1, 1>(num_elements(V));
    stan::math::fill(dV, DUMMY_VAR__);
    
    local_scalar_t__ N;
    N = DUMMY_VAR__;
    
    current_statement__ = 39;
    N = sum(V);
    local_scalar_t__ beta_eff;
    beta_eff = DUMMY_VAR__;
    
    local_scalar_t__ infected;
    infected = DUMMY_VAR__;
    
    current_statement__ = 42;
    infected = get_infected(t, beta_start, beta_end, k, m, V, pstream__);
    current_statement__ = 43;
    assign(dV, cons_list(index_uni(1), nil_index_list()), -infected,
      "assigning variable dV");
    current_statement__ = 44;
    assign(dV, cons_list(index_uni(2), nil_index_list()),
      (infected - V[(2 - 1)]), "assigning variable dV");
    current_statement__ = 45;
    assign(dV, cons_list(index_min_max(3, 5), nil_index_list()),
      subtract(
        rvalue(V, cons_list(index_min_max(2, 4), nil_index_list()), "V"),
        rvalue(V, cons_list(index_min_max(3, 5), nil_index_list()), "V")),
      "assigning variable dV");
    current_statement__ = 46;
    assign(dV, cons_list(index_uni(6), nil_index_list()),
      ((0.2 * V[(5 - 1)]) - V[(6 - 1)]), "assigning variable dV");
    current_statement__ = 47;
    assign(dV, cons_list(index_min_max(7, 17), nil_index_list()),
      subtract(
        rvalue(V, cons_list(index_min_max(6, 16), nil_index_list()), "V"),
        rvalue(V, cons_list(index_min_max(7, 17), nil_index_list()), "V")),
      "assigning variable dV");
    current_statement__ = 48;
    assign(dV, cons_list(index_uni(18), nil_index_list()),
      ((0.8 * V[(5 - 1)]) - V[(18 - 1)]), "assigning variable dV");
    current_statement__ = 49;
    assign(dV, cons_list(index_min_max(19, 29), nil_index_list()),
      subtract(
        rvalue(V, cons_list(index_min_max(18, 28), nil_index_list()), "V"),
        rvalue(V, cons_list(index_min_max(19, 29), nil_index_list()), "V")),
      "assigning variable dV");
    current_statement__ = 50;
    assign(dV, cons_list(index_uni(30), nil_index_list()),
      (V[(17 - 1)] + V[(29 - 1)]), "assigning variable dV");
    current_statement__ = 51;
    return dV;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct strat_seir_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
operator()(const T0__& t, const T1__& V, const T2__& beta_start,
           const T3__& beta_end, const T4__& m, const T5__& k,
           std::ostream* pstream__)  const 
{
return strat_seir(t, V, beta_start, beta_end, m, k, pstream__);
}
};


struct strat_seir_odefunctor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
operator()(const T0__& t, const T1__& V, std::ostream* pstream__,
           const T2__& beta_start, const T3__& beta_end, const T4__& m,
           const T5__& k)  const 
{
return strat_seir(t, V, beta_start, beta_end, m, k, pstream__);
}
};

class timeVaryingSEIR_model final : public model_base_crtp<timeVaryingSEIR_model> {

 private:
  Eigen::Matrix<double, -1, 1> init_props;
  int number_time_points;
  int number_parameters;
  int number_variables;
  double t_start;
  std::vector<double> time_series;
  std::vector<int> incidence_data;
  Eigen::Matrix<double, -1, 1> init;
 
 public:
  ~timeVaryingSEIR_model() { }
  
  inline std::string model_name() const final { return "timeVaryingSEIR_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.0", "stancflags = "};
  }
  
  
  timeVaryingSEIR_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "timeVaryingSEIR_model_namespace::timeVaryingSEIR_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization","init_props","double",
          context__.to_vec(4));
      init_props = Eigen::Matrix<double, -1, 1>(4);
      stan::math::fill(init_props, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> init_props_flat__;
        current_statement__ = 15;
        assign(init_props_flat__, nil_index_list(),
          context__.vals_r("init_props"),
          "assigning variable init_props_flat__");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 15;
          assign(init_props, cons_list(index_uni(sym1__), nil_index_list()),
            init_props_flat__[(pos__ - 1)], "assigning variable init_props");
          current_statement__ = 15;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 15;
        current_statement__ = 15;
        check_greater_or_equal(function__, "init_props[sym1__]",
                               init_props[(sym1__ - 1)], 0);}
      current_statement__ = 16;
      context__.validate_dims("data initialization","number_time_points",
          "int",context__.to_vec());
      number_time_points = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      number_time_points = context__.vals_i("number_time_points")[(1 - 1)];
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "number_time_points",
                             number_time_points, 1);
      current_statement__ = 17;
      context__.validate_dims("data initialization","number_parameters",
          "int",context__.to_vec());
      number_parameters = std::numeric_limits<int>::min();
      
      current_statement__ = 17;
      number_parameters = context__.vals_i("number_parameters")[(1 - 1)];
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "number_parameters",
                             number_parameters, 1);
      current_statement__ = 18;
      context__.validate_dims("data initialization","number_variables","int",
          context__.to_vec());
      number_variables = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      number_variables = context__.vals_i("number_variables")[(1 - 1)];
      current_statement__ = 18;
      current_statement__ = 18;
      check_greater_or_equal(function__, "number_variables",
                             number_variables, 1);
      current_statement__ = 19;
      context__.validate_dims("data initialization","t_start","double",
          context__.to_vec());
      t_start = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      t_start = context__.vals_r("t_start")[(1 - 1)];
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "t_start", t_start, 0);
      current_statement__ = 20;
      validate_non_negative_index("time_series", "number_time_points",
                                  number_time_points);
      current_statement__ = 21;
      context__.validate_dims("data initialization","time_series","double",
          context__.to_vec(number_time_points));
      time_series = std::vector<double>(number_time_points, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 21;
      assign(time_series, nil_index_list(), context__.vals_r("time_series"),
        "assigning variable time_series");
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= number_time_points; ++sym1__) {
        current_statement__ = 21;
        current_statement__ = 21;
        check_greater_or_equal(function__, "time_series[sym1__]",
                               time_series[(sym1__ - 1)], 0);}
      current_statement__ = 22;
      validate_non_negative_index("incidence_data", "number_time_points - 1",
                                  (number_time_points - 1));
      current_statement__ = 23;
      context__.validate_dims("data initialization","incidence_data","int",
          context__.to_vec((number_time_points - 1)));
      incidence_data = std::vector<int>((number_time_points - 1), std::numeric_limits<int>::min());
      
      current_statement__ = 23;
      assign(incidence_data, nil_index_list(),
        context__.vals_i("incidence_data"),
        "assigning variable incidence_data");
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= (number_time_points - 1); ++sym1__) {
        current_statement__ = 23;
        current_statement__ = 23;
        check_greater_or_equal(function__, "incidence_data[sym1__]",
                               incidence_data[(sym1__ - 1)], 0);}
      current_statement__ = 24;
      init = Eigen::Matrix<double, -1, 1>(30);
      stan::math::fill(init, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 25;
      assign(init, cons_list(index_uni(1), nil_index_list()),
        init_props[(1 - 1)], "assigning variable init");
      current_statement__ = 26;
      assign(init, cons_list(index_min_max(2, 5), nil_index_list()),
        to_vector(rep_array((init_props[(2 - 1)] / 4), 4)),
        "assigning variable init");
      current_statement__ = 27;
      assign(init, cons_list(index_min_max(6, 17), nil_index_list()),
        to_vector(rep_array(((0.2 * init_props[(3 - 1)]) / 12), 12)),
        "assigning variable init");
      current_statement__ = 28;
      assign(init, cons_list(index_min_max(18, 29), nil_index_list()),
        to_vector(rep_array(((0.8 * init_props[(3 - 1)]) / 12), 12)),
        "assigning variable init");
      current_statement__ = 29;
      assign(init, cons_list(index_uni(30), nil_index_list()),
        init_props[(4 - 1)], "assigning variable init");
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= 30; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "init[sym1__]",
                               init[(sym1__ - 1)], 0);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "timeVaryingSEIR_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ beta_start;
      beta_start = DUMMY_VAR__;
      
      current_statement__ = 1;
      beta_start = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        beta_start = stan::math::lb_constrain(beta_start, 0, lp__);
      } else {
        current_statement__ = 1;
        beta_start = stan::math::lb_constrain(beta_start, 0);
      }
      local_scalar_t__ beta_fract;
      beta_fract = DUMMY_VAR__;
      
      current_statement__ = 2;
      beta_fract = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        beta_fract = stan::math::lub_constrain(beta_fract, 0, 1, lp__);
      } else {
        current_statement__ = 2;
        beta_fract = stan::math::lub_constrain(beta_fract, 0, 1);
      }
      local_scalar_t__ k;
      k = DUMMY_VAR__;
      
      current_statement__ = 3;
      k = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        k = stan::math::lub_constrain(k, 0, 1, lp__);
      } else {
        current_statement__ = 3;
        k = stan::math::lub_constrain(k, 0, 1);
      }
      {
        current_statement__ = 5;
        validate_non_negative_index("x_hat", "number_time_points",
                                    number_time_points);
        current_statement__ = 6;
        validate_non_negative_index("x_hat", "number_variables",
                                    number_variables);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> x_hat;
        x_hat = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(number_time_points, Eigen::Matrix<local_scalar_t__, -1, 1>(number_variables));
        stan::math::fill(x_hat, DUMMY_VAR__);
        
        current_statement__ = 8;
        lp_accum__.add(cauchy_lpdf<propto__>(beta_start, 0, .25));
        current_statement__ = 9;
        lp_accum__.add(beta_lpdf<propto__>(beta_fract, 2, 2));
        current_statement__ = 10;
        lp_accum__.add(beta_lpdf<propto__>(k, 2, 8));
        current_statement__ = 11;
        assign(x_hat, nil_index_list(),
          ode_bdf(strat_seir_odefunctor__(), init, t_start, time_series,
            pstream__, beta_start, (beta_start * beta_fract),
            (number_time_points / 2.0), k), "assigning variable x_hat");
        current_statement__ = 14;
        for (int t = 1; t <= (number_time_points - 1); ++t) {
          current_statement__ = 12;
          lp_accum__.add(
            poisson_lpmf<propto__>(incidence_data[(t - 1)],
              max((Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                x_hat[(t - 1)][(19 - 1)], 0).finished())));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "timeVaryingSEIR_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double beta_start;
      beta_start = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      beta_start = in__.scalar();
      current_statement__ = 1;
      beta_start = stan::math::lb_constrain(beta_start, 0);
      double beta_fract;
      beta_fract = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta_fract = in__.scalar();
      current_statement__ = 2;
      beta_fract = stan::math::lub_constrain(beta_fract, 0, 1);
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      k = in__.scalar();
      current_statement__ = 3;
      k = stan::math::lub_constrain(k, 0, 1);
      vars__.emplace_back(beta_start);
      vars__.emplace_back(beta_fract);
      vars__.emplace_back(k);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double beta_end;
      beta_end = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      beta_end = (beta_start * beta_fract);
      vars__.emplace_back(beta_end);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double beta_start;
      beta_start = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      beta_start = context__.vals_r("beta_start")[(1 - 1)];
      double beta_start_free__;
      beta_start_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      beta_start_free__ = stan::math::lb_free(beta_start, 0);
      double beta_fract;
      beta_fract = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta_fract = context__.vals_r("beta_fract")[(1 - 1)];
      double beta_fract_free__;
      beta_fract_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta_fract_free__ = stan::math::lub_free(beta_fract, 0, 1);
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      k = context__.vals_r("k")[(1 - 1)];
      double k_free__;
      k_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      k_free__ = stan::math::lub_free(k, 0, 1);
      vars__.emplace_back(beta_start_free__);
      vars__.emplace_back(beta_fract_free__);
      vars__.emplace_back(k_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta_start");
    names__.emplace_back("beta_fract");
    names__.emplace_back("k");
    names__.emplace_back("beta_end");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta_start");
    param_names__.emplace_back(std::string() + "beta_fract");
    param_names__.emplace_back(std::string() + "k");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "beta_end");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta_start");
    param_names__.emplace_back(std::string() + "beta_fract");
    param_names__.emplace_back(std::string() + "k");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "beta_end");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_start\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_fract\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_end\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_start\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_fract\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_end\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = timeVaryingSEIR_model_namespace::timeVaryingSEIR_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return timeVaryingSEIR_model_namespace::profiles__;
}

#endif


